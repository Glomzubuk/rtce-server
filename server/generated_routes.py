# This file is automatically generated by geneate_python.py.  Do NOT modify!!
"""
generated_routes.py

Implement low-level route handlers for all the protobuf services.  In the handlers,
either call the RPC handler registered in the app server or throw an exception if
no such handler exists.

See server/rpc.py for more information.

"""

import server.rpc
import tornado.web
import logging

import tbadmin.account_pb2
import tbadmin.audit_pb2
import tbadmin.config_pb2
import tbadmin.match_pb2
import tbadmin.report_pb2
import tbadmin.shop_pb2
import tbadmin.stats_pb2
import tbmatch.account_pb2
import tbmatch.crash_pb2
import tbmatch.event_pb2
import tbmatch.lobby_pb2
import tbmatch.log_pb2
import tbmatch.match_pb2
import tbmatch.query_pb2
import tbmatch.session_pb2
import tbmatch.shop_pb2
import tbmatch.user_pb2
import tbrpc.tbrpc_pb2
import tbui.tbcharacter_pb2


# tbadmin.AccountAdminService service
class LookupUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.LookupUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LookupUser ', request)

        handler = server.rpc.GetRouteHandler('LookupUser')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService LookupUser not implemented!')

        response = tbmatch.account_pb2.UserInfo()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SearchUsersHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.SearchUsersRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SearchUsers ', request)

        handler = server.rpc.GetRouteHandler('SearchUsers')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService SearchUsers not implemented!')

        response = tbadmin.account_pb2.SearchUsersResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class CreateUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.CreateUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CreateUser ', request)

        handler = server.rpc.GetRouteHandler('CreateUser')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService CreateUser not implemented!')

        response = tbadmin.account_pb2.CreateUserResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class UpdateUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.UpdateUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received UpdateUser ', request)

        handler = server.rpc.GetRouteHandler('UpdateUser')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService UpdateUser not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetUserContactAddressHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.SetUserContactAddressRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetUserContactAddress ', request)

        handler = server.rpc.GetRouteHandler('SetUserContactAddress')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService SetUserContactAddress not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetUserAccessHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.SetUserAccessRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetUserAccess ', request)

        handler = server.rpc.GetRouteHandler('SetUserAccess')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService SetUserAccess not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetUserLoginStatusHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.SetUserLoginStatusRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetUserLoginStatus ', request)

        handler = server.rpc.GetRouteHandler('SetUserLoginStatus')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService SetUserLoginStatus not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ResetUserPasswordHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.ResetUserPasswordRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ResetUserPassword ', request)

        handler = server.rpc.GetRouteHandler('ResetUserPassword')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService ResetUserPassword not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class NukeHandleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.NukeHandleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received NukeHandle ', request)

        handler = server.rpc.GetRouteHandler('NukeHandle')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService NukeHandle not implemented!')

        response = tbadmin.account_pb2.NukeHandleResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetHandleHistoryHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.GetHandleHistoryRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetHandleHistory ', request)

        handler = server.rpc.GetRouteHandler('GetHandleHistory')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService GetHandleHistory not implemented!')

        response = tbadmin.account_pb2.GetHandleHistoryResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SendUserEmailNotificationHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.account_pb2.SendUserEmailNotificationRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SendUserEmailNotification ', request)

        handler = server.rpc.GetRouteHandler('SendUserEmailNotification')
        if not handler:
            raise NotImplementedError('tbadmin.AccountAdminService SendUserEmailNotification not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.AuditService service
class SearchAuditHistoryHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.audit_pb2.SearchAuditHistoryRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SearchAuditHistory ', request)

        handler = server.rpc.GetRouteHandler('SearchAuditHistory')
        if not handler:
            raise NotImplementedError('tbadmin.AuditService SearchAuditHistory not implemented!')

        response = tbadmin.audit_pb2.SearchAuditHistoryResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.ConfigService service
class GetAppConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetAppConfig ', request)

        handler = server.rpc.GetRouteHandler('GetAppConfig')
        if not handler:
            raise NotImplementedError('tbadmin.ConfigService GetAppConfig not implemented!')

        response = tbadmin.config_pb2.AppConfig()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.MatchConfigService service
class GetGlobalConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetGlobalConfig ', request)

        handler = server.rpc.GetRouteHandler('GetGlobalConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService GetGlobalConfig not implemented!')

        response = tbadmin.config_pb2.GetGlobalConfigResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetGlobalConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.SetGlobalConfigRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetGlobalConfig ', request)

        handler = server.rpc.GetRouteHandler('SetGlobalConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService SetGlobalConfig not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetMatchQueueConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetMatchQueueConfig ', request)

        handler = server.rpc.GetRouteHandler('GetMatchQueueConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService GetMatchQueueConfig not implemented!')

        response = tbadmin.config_pb2.GetMatchQueueConfigResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetMatchQueueConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.SetMatchQueueConfigRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetMatchQueueConfig ', request)

        handler = server.rpc.GetRouteHandler('SetMatchQueueConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService SetMatchQueueConfig not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetMatchUserConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetMatchUserConfig ', request)

        handler = server.rpc.GetRouteHandler('GetMatchUserConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService GetMatchUserConfig not implemented!')

        response = tbadmin.config_pb2.GetMatchUserConfigResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetMatchUserConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.SetMatchUserConfigRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetMatchUserConfig ', request)

        handler = server.rpc.GetRouteHandler('SetMatchUserConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService SetMatchUserConfig not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetLobbyConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetLobbyConfig ', request)

        handler = server.rpc.GetRouteHandler('GetLobbyConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService GetLobbyConfig not implemented!')

        response = tbadmin.config_pb2.GetLobbyConfigResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetLobbyConfigHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.SetLobbyConfigRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetLobbyConfig ', request)

        handler = server.rpc.GetRouteHandler('SetLobbyConfig')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService SetLobbyConfig not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ListFeatureDefinitionsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListFeatureDefinitions ', request)

        handler = server.rpc.GetRouteHandler('ListFeatureDefinitions')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService ListFeatureDefinitions not implemented!')

        response = tbadmin.config_pb2.ListFeatureDefinitionsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetFeatureDefinitionHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.SetFeatureDefinitionRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetFeatureDefinition ', request)

        handler = server.rpc.GetRouteHandler('SetFeatureDefinition')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService SetFeatureDefinition not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class DeleteFeatureDefinitionHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.DeleteFeatureDefinitionRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received DeleteFeatureDefinition ', request)

        handler = server.rpc.GetRouteHandler('DeleteFeatureDefinition')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService DeleteFeatureDefinition not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ListFeatureRulesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListFeatureRules ', request)

        handler = server.rpc.GetRouteHandler('ListFeatureRules')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService ListFeatureRules not implemented!')

        response = tbadmin.config_pb2.ListFeatureRulesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetActiveFeaturesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetActiveFeatures ', request)

        handler = server.rpc.GetRouteHandler('GetActiveFeatures')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService GetActiveFeatures not implemented!')

        response = tbadmin.config_pb2.GetActiveFeaturesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class CreateFeatureRuleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.CreateFeatureRuleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CreateFeatureRule ', request)

        handler = server.rpc.GetRouteHandler('CreateFeatureRule')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService CreateFeatureRule not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class UpdateFeatureRuleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.UpdateFeatureRuleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received UpdateFeatureRule ', request)

        handler = server.rpc.GetRouteHandler('UpdateFeatureRule')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService UpdateFeatureRule not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class DeleteFeatureRuleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.config_pb2.DeleteFeatureRuleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received DeleteFeatureRule ', request)

        handler = server.rpc.GetRouteHandler('DeleteFeatureRule')
        if not handler:
            raise NotImplementedError('tbadmin.MatchConfigService DeleteFeatureRule not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.MatchAdminService service
class GetMatchQueueUsersHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetMatchQueueUsersRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetMatchQueueUsers ', request)

        handler = server.rpc.GetRouteHandler('GetMatchQueueUsers')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetMatchQueueUsers not implemented!')

        response = tbadmin.match_pb2.GetMatchQueueUsersResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetLobbiesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetLobbiesRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetLobbies ', request)

        handler = server.rpc.GetRouteHandler('GetLobbies')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetLobbies not implemented!')

        response = tbadmin.match_pb2.GetLobbiesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetLobbyHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetLobbyRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetLobby ', request)

        handler = server.rpc.GetRouteHandler('GetLobby')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetLobby not implemented!')

        response = tbadmin.match_pb2.GetLobbyResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetActiveMatchesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetActiveMatchesRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetActiveMatches ', request)

        handler = server.rpc.GetRouteHandler('GetActiveMatches')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetActiveMatches not implemented!')

        response = tbadmin.match_pb2.GetActiveMatchesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetActiveMatchHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetActiveMatchRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetActiveMatch ', request)

        handler = server.rpc.GetRouteHandler('GetActiveMatch')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetActiveMatch not implemented!')

        response = tbadmin.match_pb2.GetActiveMatchResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetRecentMatchesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetRecentMatchesRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetRecentMatches ', request)

        handler = server.rpc.GetRouteHandler('GetRecentMatches')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetRecentMatches not implemented!')

        response = tbadmin.match_pb2.GetRecentMatchesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetMatchDetailHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetMatchDetailRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetMatchDetail ', request)

        handler = server.rpc.GetRouteHandler('GetMatchDetail')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetMatchDetail not implemented!')

        response = tbadmin.match_pb2.GetMatchDetailResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetPlayerDetailHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.match_pb2.GetPlayerDetailRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetPlayerDetail ', request)

        handler = server.rpc.GetRouteHandler('GetPlayerDetail')
        if not handler:
            raise NotImplementedError('tbadmin.MatchAdminService GetPlayerDetail not implemented!')

        response = tbadmin.match_pb2.GetPlayerDetailResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.FailReportService service
class ListDesyncsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.report_pb2.ListDesyncsRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListDesyncs ', request)

        handler = server.rpc.GetRouteHandler('ListDesyncs')
        if not handler:
            raise NotImplementedError('tbadmin.FailReportService ListDesyncs not implemented!')

        response = tbadmin.report_pb2.ListDesyncsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ListCrashesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.report_pb2.ListCrashesRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListCrashes ', request)

        handler = server.rpc.GetRouteHandler('ListCrashes')
        if not handler:
            raise NotImplementedError('tbadmin.FailReportService ListCrashes not implemented!')

        response = tbadmin.report_pb2.ListCrashesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ListCrashBuildIdentifiersHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.report_pb2.ListCrashBuildIdentifiersRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListCrashBuildIdentifiers ', request)

        handler = server.rpc.GetRouteHandler('ListCrashBuildIdentifiers')
        if not handler:
            raise NotImplementedError('tbadmin.FailReportService ListCrashBuildIdentifiers not implemented!')

        response = tbadmin.report_pb2.ListCrashBuildIdentifiersResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ListCrashCollectionsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.report_pb2.ListCrashCollectionsRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ListCrashCollections ', request)

        handler = server.rpc.GetRouteHandler('ListCrashCollections')
        if not handler:
            raise NotImplementedError('tbadmin.FailReportService ListCrashCollections not implemented!')

        response = tbadmin.report_pb2.ListCrashCollectionsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.ShopAdminService service
class SearchPurchaseOrdersHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.shop_pb2.SearchPurchaseOrdersRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SearchPurchaseOrders ', request)

        handler = server.rpc.GetRouteHandler('SearchPurchaseOrders')
        if not handler:
            raise NotImplementedError('tbadmin.ShopAdminService SearchPurchaseOrders not implemented!')

        response = tbadmin.shop_pb2.SearchPurchaseOrdersResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SyncPurchaseOrderHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.shop_pb2.SyncPurchaseOrderRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SyncPurchaseOrder ', request)

        handler = server.rpc.GetRouteHandler('SyncPurchaseOrder')
        if not handler:
            raise NotImplementedError('tbadmin.ShopAdminService SyncPurchaseOrder not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class VoidPurchaseOrderHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.shop_pb2.VoidPurchaseOrderRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received VoidPurchaseOrder ', request)

        handler = server.rpc.GetRouteHandler('VoidPurchaseOrder')
        if not handler:
            raise NotImplementedError('tbadmin.ShopAdminService VoidPurchaseOrder not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class RefundPurchaseOrderHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.shop_pb2.RefundPurchaseOrderRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received RefundPurchaseOrder ', request)

        handler = server.rpc.GetRouteHandler('RefundPurchaseOrder')
        if not handler:
            raise NotImplementedError('tbadmin.ShopAdminService RefundPurchaseOrder not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbadmin.StatsService service
class CountUsersHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CountUsers ', request)

        handler = server.rpc.GetRouteHandler('CountUsers')
        if not handler:
            raise NotImplementedError('tbadmin.StatsService CountUsers not implemented!')

        response = tbadmin.stats_pb2.UserCountStats()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetSessionsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.stats_pb2.GetSessionsRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetSessions ', request)

        handler = server.rpc.GetRouteHandler('GetSessions')
        if not handler:
            raise NotImplementedError('tbadmin.StatsService GetSessions not implemented!')

        response = tbadmin.stats_pb2.GetSessionsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetCharacterUsageHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbadmin.stats_pb2.GetCharacterUsageRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetCharacterUsage ', request)

        handler = server.rpc.GetRouteHandler('GetCharacterUsage')
        if not handler:
            raise NotImplementedError('tbadmin.StatsService GetCharacterUsage not implemented!')

        response = tbadmin.stats_pb2.GetCharacterUsageResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.AccountService service
class CheckHandleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.CheckHandleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CheckHandle ', request)

        handler = server.rpc.GetRouteHandler('CheckHandle')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService CheckHandle not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class RegisterUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.RegisterUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received RegisterUser ', request)

        handler = server.rpc.GetRouteHandler('RegisterUser')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService RegisterUser not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ValidateUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.ValidateUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ValidateUser ', request)

        handler = server.rpc.GetRouteHandler('ValidateUser')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService ValidateUser not implemented!')

        response = tbmatch.account_pb2.UserInfo()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetSecretQuestionHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.GetSecretQuestionRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetSecretQuestion ', request)

        handler = server.rpc.GetRouteHandler('GetSecretQuestion')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService GetSecretQuestion not implemented!')

        response = tbmatch.account_pb2.GetSecretQuestionResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SendPasswordResetEmailHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.SendPasswordResetEmailRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SendPasswordResetEmail ', request)

        handler = server.rpc.GetRouteHandler('SendPasswordResetEmail')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService SendPasswordResetEmail not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class VerifyResetPasswordCodeHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.VerifyResetPasswordCodeRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received VerifyResetPasswordCode ', request)

        handler = server.rpc.GetRouteHandler('VerifyResetPasswordCode')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService VerifyResetPasswordCode not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ResetPasswordHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.ResetPasswordRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ResetPassword ', request)

        handler = server.rpc.GetRouteHandler('ResetPassword')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService ResetPassword not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetUserInfoHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetUserInfo ', request)

        handler = server.rpc.GetRouteHandler('GetUserInfo')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService GetUserInfo not implemented!')

        response = tbmatch.account_pb2.UserInfo()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ResendValidationEmailHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ResendValidationEmail ', request)

        handler = server.rpc.GetRouteHandler('ResendValidationEmail')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService ResendValidationEmail not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetLocaleHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.SetLocaleRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetLocale ', request)

        handler = server.rpc.GetRouteHandler('SetLocale')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService SetLocale not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetContactAddressHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.ContactAddress()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetContactAddress ', request)

        handler = server.rpc.GetRouteHandler('SetContactAddress')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService SetContactAddress not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetUserPrefsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetUserPrefs ', request)

        handler = server.rpc.GetRouteHandler('GetUserPrefs')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService GetUserPrefs not implemented!')

        response = tbmatch.account_pb2.UserPrefs()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetUserPrefsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.UserPrefs()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetUserPrefs ', request)

        handler = server.rpc.GetRouteHandler('SetUserPrefs')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService SetUserPrefs not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ChangePasswordHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.ChangePasswordRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ChangePassword ', request)

        handler = server.rpc.GetRouteHandler('ChangePassword')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService ChangePassword not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ChangeEmailAddressHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.ChangeEmailAddressRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ChangeEmailAddress ', request)

        handler = server.rpc.GetRouteHandler('ChangeEmailAddress')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService ChangeEmailAddress not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class RedeemAccessCodeHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.account_pb2.RedeemAccessCodeRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received RedeemAccessCode ', request)

        handler = server.rpc.GetRouteHandler('RedeemAccessCode')
        if not handler:
            raise NotImplementedError('tbmatch.AccountService RedeemAccessCode not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.CrashReportService service
class CrashReportHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.crash_pb2.CrashReportRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CrashReport ', request)

        handler = server.rpc.GetRouteHandler('CrashReport')
        if not handler:
            raise NotImplementedError('tbmatch.CrashReportService CrashReport not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.EventService service
class EventPingHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received EventPing ', request)

        handler = server.rpc.GetRouteHandler('EventPing')
        if not handler:
            raise NotImplementedError('tbmatch.EventService EventPing not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.LobbyService service
class CreateLobbyHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.CreateLobbyRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CreateLobby ', request)

        handler = server.rpc.GetRouteHandler('CreateLobby')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService CreateLobby not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetLobbyJoinCodeHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.GetLobbyJoinCodeRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetLobbyJoinCode ', request)

        handler = server.rpc.GetRouteHandler('GetLobbyJoinCode')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService GetLobbyJoinCode not implemented!')

        response = tbmatch.lobby_pb2.GetLobbyJoinCodeResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class JoinLobbyByCodeHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.JoinLobbyByCodeRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received JoinLobbyByCode ', request)

        handler = server.rpc.GetRouteHandler('JoinLobbyByCode')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService JoinLobbyByCode not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LeaveLobbyHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LeaveLobby ', request)

        handler = server.rpc.GetRouteHandler('LeaveLobby')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LeaveLobby not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LobbySetReadyHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.LobbySetReadyRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LobbySetReady ', request)

        handler = server.rpc.GetRouteHandler('LobbySetReady')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LobbySetReady not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LobbySetOwnerHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.LobbySetOwnerRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LobbySetOwner ', request)

        handler = server.rpc.GetRouteHandler('LobbySetOwner')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LobbySetOwner not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LobbySetGameOptionsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.LobbySetGameOptionsRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LobbySetGameOptions ', request)

        handler = server.rpc.GetRouteHandler('LobbySetGameOptions')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LobbySetGameOptions not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LobbyBanUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.LobbyBanUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LobbyBanUser ', request)

        handler = server.rpc.GetRouteHandler('LobbyBanUser')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LobbyBanUser not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LobbyRemoveUserHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.lobby_pb2.LobbyRemoveUserRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received LobbyRemoveUser ', request)

        handler = server.rpc.GetRouteHandler('LobbyRemoveUser')
        if not handler:
            raise NotImplementedError('tbmatch.LobbyService LobbyRemoveUser not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.MatchService service
class GetGameProfileHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetGameProfile ', request)

        handler = server.rpc.GetRouteHandler('GetGameProfile')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService GetGameProfile not implemented!')

        response = tbmatch.match_pb2.GameProfile()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class PingTestHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received PingTest ', request)

        handler = server.rpc.GetRouteHandler('PingTest')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService PingTest not implemented!')

        response = tbmatch.match_pb2.PingTestResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetMatchHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.match_pb2.GetMatchRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetMatch ', request)

        handler = server.rpc.GetRouteHandler('GetMatch')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService GetMatch not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ResumeGetMatchHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ResumeGetMatch ', request)

        handler = server.rpc.GetRouteHandler('ResumeGetMatch')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService ResumeGetMatch not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class CancelGetMatchHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CancelGetMatch ', request)

        handler = server.rpc.GetRouteHandler('CancelGetMatch')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService CancelGetMatch not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class ResetGameHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.match_pb2.ResetGameRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ResetGame ', request)

        handler = server.rpc.GetRouteHandler('ResetGame')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService ResetGame not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetGameReplayRecordHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.match_pb2.GetGameReplayRecordRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetGameReplayRecord ', request)

        handler = server.rpc.GetRouteHandler('GetGameReplayRecord')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService GetGameReplayRecord not implemented!')

        response = tbmatch.match_pb2.GetGameReplayRecordResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class DesyncReportHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.match_pb2.DesyncReportRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received DesyncReport ', request)

        handler = server.rpc.GetRouteHandler('DesyncReport')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService DesyncReport not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class UpdatePlayerPreferencesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.match_pb2.UpdatePlayerPreferencesRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received UpdatePlayerPreferences ', request)

        handler = server.rpc.GetRouteHandler('UpdatePlayerPreferences')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService UpdatePlayerPreferences not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetPlayerStatsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetPlayerStats ', request)

        handler = server.rpc.GetRouteHandler('GetPlayerStats')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService GetPlayerStats not implemented!')

        response = tbmatch.match_pb2.GetPlayerStatsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetRecentGamesHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetRecentGames ', request)

        handler = server.rpc.GetRouteHandler('GetRecentGames')
        if not handler:
            raise NotImplementedError('tbmatch.MatchService GetRecentGames not implemented!')

        response = tbmatch.match_pb2.GetRecentGamesResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.SessionService service
class LoginHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.session_pb2.LoginRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received Login ', request)

        handler = server.rpc.GetRouteHandler('Login')
        if not handler:
            raise NotImplementedError('tbmatch.SessionService Login not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetGameSessionTicketHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.session_pb2.GetGameSessionTicketRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetGameSessionTicket ', request)

        handler = server.rpc.GetRouteHandler('GetGameSessionTicket')
        if not handler:
            raise NotImplementedError('tbmatch.SessionService GetGameSessionTicket not implemented!')

        response = tbmatch.session_pb2.GetGameSessionTicketResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class RedeemGameSessionTicketHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.session_pb2.RedeemGameSessionTicketRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received RedeemGameSessionTicket ', request)

        handler = server.rpc.GetRouteHandler('RedeemGameSessionTicket')
        if not handler:
            raise NotImplementedError('tbmatch.SessionService RedeemGameSessionTicket not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class LogoutHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received Logout ', request)

        handler = server.rpc.GetRouteHandler('Logout')
        if not handler:
            raise NotImplementedError('tbmatch.SessionService Logout not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())


# tbmatch.ShopService service
class GetStoredPaymentMethodsHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbrpc.tbrpc_pb2.Empty()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetStoredPaymentMethods ', request)

        handler = server.rpc.GetRouteHandler('GetStoredPaymentMethods')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService GetStoredPaymentMethods not implemented!')

        response = tbmatch.shop_pb2.GetStoredPaymentMethodsResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class CreateStoredPaymentMethodHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.PaymentMethod()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received CreateStoredPaymentMethod ', request)

        handler = server.rpc.GetRouteHandler('CreateStoredPaymentMethod')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService CreateStoredPaymentMethod not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class UpdateStoredPaymentMethodHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.PaymentMethod()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received UpdateStoredPaymentMethod ', request)

        handler = server.rpc.GetRouteHandler('UpdateStoredPaymentMethod')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService UpdateStoredPaymentMethod not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SetDefaultStoredPaymentMethodHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.PaymentMethodId()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SetDefaultStoredPaymentMethod ', request)

        handler = server.rpc.GetRouteHandler('SetDefaultStoredPaymentMethod')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService SetDefaultStoredPaymentMethod not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class RemoveStoredPaymentMethodHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.PaymentMethodId()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received RemoveStoredPaymentMethod ', request)

        handler = server.rpc.GetRouteHandler('RemoveStoredPaymentMethod')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService RemoveStoredPaymentMethod not implemented!')

        response = tbrpc.tbrpc_pb2.Empty()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class SubmitPurchaseOrderHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.SubmitPurchaseOrderRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received SubmitPurchaseOrder ', request)

        handler = server.rpc.GetRouteHandler('SubmitPurchaseOrder')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService SubmitPurchaseOrder not implemented!')

        response = tbmatch.shop_pb2.SubmitPurchaseOrderResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetPurchaseOrderHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.GetPurchaseOrderRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetPurchaseOrder ', request)

        handler = server.rpc.GetRouteHandler('GetPurchaseOrder')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService GetPurchaseOrder not implemented!')

        response = tbmatch.shop_pb2.PurchaseOrder()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetAccountOrderHistoryHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.GetAccountOrderHistoryRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetAccountOrderHistory ', request)

        handler = server.rpc.GetRouteHandler('GetAccountOrderHistory')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService GetAccountOrderHistory not implemented!')

        response = tbmatch.shop_pb2.GetAccountOrderHistoryResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetAccountBalanceHistoryHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.GetAccountBalanceHistoryRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetAccountBalanceHistory ', request)

        handler = server.rpc.GetRouteHandler('GetAccountBalanceHistory')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService GetAccountBalanceHistory not implemented!')

        response = tbmatch.shop_pb2.GetAccountBalanceHistoryResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

class GetAccountBalanceHandler(tornado.web.RequestHandler):
    def post(self):
        request = tbmatch.shop_pb2.GetAccountBalanceRequest()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received GetAccountBalance ', request)

        handler = server.rpc.GetRouteHandler('GetAccountBalance')
        if not handler:
            raise NotImplementedError('tbmatch.ShopService GetAccountBalance not implemented!')

        response = tbmatch.shop_pb2.GetAccountBalanceResult()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())
class GetUserCountHandler(tornado.web.RequestHandler):
    def get(self):
        count = len(server.users.users)
        logging.debug(count)
        self.write(str(count))
class GetUsersInRankedCountHandler(tornado.web.RequestHandler):
    def get(self):
        count = len(server.matchmaker.queue_users)
        logging.debug(count)
        self.write(str(count))

def GetRoutes():
    """
    Return all the routes defined in this module.
    """
    return [
        (r'/_01/rpc/LookupUser', LookupUserHandler),
        (r'/_01/rpc/SearchUsers', SearchUsersHandler),
        (r'/_01/rpc/CreateUser', CreateUserHandler),
        (r'/_01/rpc/UpdateUser', UpdateUserHandler),
        (r'/_01/rpc/SetUserContactAddress', SetUserContactAddressHandler),
        (r'/_01/rpc/SetUserAccess', SetUserAccessHandler),
        (r'/_01/rpc/SetUserLoginStatus', SetUserLoginStatusHandler),
        (r'/_01/rpc/ResetUserPassword', ResetUserPasswordHandler),
        (r'/_01/rpc/NukeHandle', NukeHandleHandler),
        (r'/_01/rpc/GetHandleHistory', GetHandleHistoryHandler),
        (r'/_01/rpc/SendUserEmailNotification', SendUserEmailNotificationHandler),
        (r'/_01/rpc/SearchAuditHistory', SearchAuditHistoryHandler),
        (r'/_01/rpc/GetAppConfig', GetAppConfigHandler),
        (r'/_01/rpc/GetGlobalConfig', GetGlobalConfigHandler),
        (r'/_01/rpc/SetGlobalConfig', SetGlobalConfigHandler),
        (r'/_01/rpc/GetMatchQueueConfig', GetMatchQueueConfigHandler),
        (r'/_01/rpc/SetMatchQueueConfig', SetMatchQueueConfigHandler),
        (r'/_01/rpc/GetMatchUserConfig', GetMatchUserConfigHandler),
        (r'/_01/rpc/SetMatchUserConfig', SetMatchUserConfigHandler),
        (r'/_01/rpc/GetLobbyConfig', GetLobbyConfigHandler),
        (r'/_01/rpc/SetLobbyConfig', SetLobbyConfigHandler),
        (r'/_01/rpc/ListFeatureDefinitions', ListFeatureDefinitionsHandler),
        (r'/_01/rpc/SetFeatureDefinition', SetFeatureDefinitionHandler),
        (r'/_01/rpc/DeleteFeatureDefinition', DeleteFeatureDefinitionHandler),
        (r'/_01/rpc/ListFeatureRules', ListFeatureRulesHandler),
        (r'/_01/rpc/GetActiveFeatures', GetActiveFeaturesHandler),
        (r'/_01/rpc/CreateFeatureRule', CreateFeatureRuleHandler),
        (r'/_01/rpc/UpdateFeatureRule', UpdateFeatureRuleHandler),
        (r'/_01/rpc/DeleteFeatureRule', DeleteFeatureRuleHandler),
        (r'/_01/rpc/GetMatchQueueUsers', GetMatchQueueUsersHandler),
        (r'/_01/rpc/GetLobbies', GetLobbiesHandler),
        (r'/_01/rpc/GetLobby', GetLobbyHandler),
        (r'/_01/rpc/GetActiveMatches', GetActiveMatchesHandler),
        (r'/_01/rpc/GetActiveMatch', GetActiveMatchHandler),
        (r'/_01/rpc/GetRecentMatches', GetRecentMatchesHandler),
        (r'/_01/rpc/GetMatchDetail', GetMatchDetailHandler),
        (r'/_01/rpc/GetPlayerDetail', GetPlayerDetailHandler),
        (r'/_01/rpc/ListDesyncs', ListDesyncsHandler),
        (r'/_01/rpc/ListCrashes', ListCrashesHandler),
        (r'/_01/rpc/ListCrashBuildIdentifiers', ListCrashBuildIdentifiersHandler),
        (r'/_01/rpc/ListCrashCollections', ListCrashCollectionsHandler),
        (r'/_01/rpc/SearchPurchaseOrders', SearchPurchaseOrdersHandler),
        (r'/_01/rpc/SyncPurchaseOrder', SyncPurchaseOrderHandler),
        (r'/_01/rpc/VoidPurchaseOrder', VoidPurchaseOrderHandler),
        (r'/_01/rpc/RefundPurchaseOrder', RefundPurchaseOrderHandler),
        (r'/_01/rpc/CountUsers', CountUsersHandler),
        (r'/_01/rpc/GetSessions', GetSessionsHandler),
        (r'/_01/rpc/GetCharacterUsage', GetCharacterUsageHandler),
        (r'/_01/rpc/CheckHandle', CheckHandleHandler),
        (r'/_01/rpc/RegisterUser', RegisterUserHandler),
        (r'/_01/rpc/ValidateUser', ValidateUserHandler),
        (r'/_01/rpc/GetSecretQuestion', GetSecretQuestionHandler),
        (r'/_01/rpc/SendPasswordResetEmail', SendPasswordResetEmailHandler),
        (r'/_01/rpc/VerifyResetPasswordCode', VerifyResetPasswordCodeHandler),
        (r'/_01/rpc/ResetPassword', ResetPasswordHandler),
        (r'/_01/rpc/GetUserInfo', GetUserInfoHandler),
        (r'/_01/rpc/ResendValidationEmail', ResendValidationEmailHandler),
        (r'/_01/rpc/SetLocale', SetLocaleHandler),
        (r'/_01/rpc/SetContactAddress', SetContactAddressHandler),
        (r'/_01/rpc/GetUserPrefs', GetUserPrefsHandler),
        (r'/_01/rpc/SetUserPrefs', SetUserPrefsHandler),
        (r'/_01/rpc/ChangePassword', ChangePasswordHandler),
        (r'/_01/rpc/ChangeEmailAddress', ChangeEmailAddressHandler),
        (r'/_01/rpc/RedeemAccessCode', RedeemAccessCodeHandler),
        (r'/_01/rpc/CrashReport', CrashReportHandler),
        (r'/_01/rpc/EventPing', EventPingHandler),
        (r'/_01/rpc/CreateLobby', CreateLobbyHandler),
        (r'/_01/rpc/GetLobbyJoinCode', GetLobbyJoinCodeHandler),
        (r'/_01/rpc/JoinLobbyByCode', JoinLobbyByCodeHandler),
        (r'/_01/rpc/LeaveLobby', LeaveLobbyHandler),
        (r'/_01/rpc/LobbySetReady', LobbySetReadyHandler),
        (r'/_01/rpc/LobbySetOwner', LobbySetOwnerHandler),
        (r'/_01/rpc/LobbySetGameOptions', LobbySetGameOptionsHandler),
        (r'/_01/rpc/LobbyBanUser', LobbyBanUserHandler),
        (r'/_01/rpc/LobbyRemoveUser', LobbyRemoveUserHandler),
        (r'/_01/rpc/GetGameProfile', GetGameProfileHandler),
        (r'/_01/rpc/PingTest', PingTestHandler),
        (r'/_01/rpc/GetMatch', GetMatchHandler),
        (r'/_01/rpc/ResumeGetMatch', ResumeGetMatchHandler),
        (r'/_01/rpc/CancelGetMatch', CancelGetMatchHandler),
        (r'/_01/rpc/ResetGame', ResetGameHandler),
        (r'/_01/rpc/GetGameReplayRecord', GetGameReplayRecordHandler),
        (r'/_01/rpc/DesyncReport', DesyncReportHandler),
        (r'/_01/rpc/UpdatePlayerPreferences', UpdatePlayerPreferencesHandler),
        (r'/_01/rpc/GetPlayerStats', GetPlayerStatsHandler),
        (r'/_01/rpc/GetRecentGames', GetRecentGamesHandler),
        (r'/_01/rpc/Login', LoginHandler),
        (r'/_01/rpc/GetGameSessionTicket', GetGameSessionTicketHandler),
        (r'/_01/rpc/RedeemGameSessionTicket', RedeemGameSessionTicketHandler),
        (r'/_01/rpc/Logout', LogoutHandler),
        (r'/_01/rpc/GetStoredPaymentMethods', GetStoredPaymentMethodsHandler),
        (r'/_01/rpc/CreateStoredPaymentMethod', CreateStoredPaymentMethodHandler),
        (r'/_01/rpc/UpdateStoredPaymentMethod', UpdateStoredPaymentMethodHandler),
        (r'/_01/rpc/SetDefaultStoredPaymentMethod', SetDefaultStoredPaymentMethodHandler),
        (r'/_01/rpc/RemoveStoredPaymentMethod', RemoveStoredPaymentMethodHandler),
        (r'/_01/rpc/SubmitPurchaseOrder', SubmitPurchaseOrderHandler),
        (r'/_01/rpc/GetPurchaseOrder', GetPurchaseOrderHandler),
        (r'/_01/rpc/GetAccountOrderHistory', GetAccountOrderHistoryHandler),
        (r'/_01/rpc/GetAccountBalanceHistory', GetAccountBalanceHistoryHandler),
        (r'/_01/rpc/GetAccountBalance', GetAccountBalanceHandler),
        (r'/_01/rpc/GetUserCount', GetUserCountHandler),
        (r'/_01/rpc/GetUsersInRankedCount', GetUsersInRankedCountHandler),
    ]
