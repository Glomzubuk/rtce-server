syntax = "proto2";
package tbadmin;

import "tbrpc/tbrpc.proto";
import "tbmatch/match.proto";


//
// ******************************* LUA Config Objects ***************************
//

message GlobalConfig {
	option (tbrpc.lua_config) = "Global";

	// Build version required by the server to login.
	// If blank, any build will be allowed.
	optional string req_build_version = 1	[ default="" ];
}

message MatchQueueConfig {
	option (tbrpc.lua_config) = "MatchQueue";

	// Time to live for proposal keys in seconds.
	optional int32 proposal_ttl = 1		[ default=3600 ];

	// Time to live for queue tickets.
	optional int32 queue_ticket_ttl = 2	[ default=15 ];

	// How many users to consider at once from top and bottom of time queue.
	optional int32 select_size = 3			[ default=200 ];

	// Control how much echelon may differ to qualify.
	optional double echelon_dist_min = 4	[ default=0 ];
	optional double echelon_dist_max = 5	[ default=1 ];
	optional double echelon_dist_per_sec = 6[ default=0.033 ];
	optional double echelon_score_coeff = 7	[ default=0.0 ];
	optional double echelon_dist_normalized_min = 36 [ default=0 ];
	optional double echelon_dist_normalized_max = 37 [ default=1 ];

	// Control how much total rank points may differ to qualify.
	optional double point_dist_min = 8		[ default=0 ];
	optional double point_dist_max = 9		[ default=10000 ];
	optional double point_dist_per_sec = 10	[ default=1.5 ];
	optional double point_score_coeff = 11	[ default=0.0 ];
	optional double point_dist_normalized_min = 38 [ default=100 ];
	optional double point_dist_normalized_max = 39 [ default=1000 ];

	// How long to prevent 2 players from repeating the same match-up.
	optional double last_opp_exclude_time = 12	[ default=15 ];
	// How long to remember the last opponent.
	optional double last_opp_timeout = 13	[ default=900 ];

	// How long to wait before matching to a player on another continent.
	optional double cross_continent_exclude_time = 14	[ default=60 ];

	// Ping score minimum and increase with wait time.
	optional double ping_score_min = 15		[ default=70 ];
	optional double ping_score_max = 16		[ default=250 ];
	optional double ping_score_per_sec = 17	[ default=10 ];
	optional double ping_score_coeff = 18	[ default=0.0 ];
	optional double ping_score_normalized_min = 30 [ default=70 ];
	optional double ping_score_normalized_max = 31 [ default=150 ];

	// Geo distance minimum and increase with wait time.
	optional double geo_dist_min = 19		[ default=0 ];

	// 25,000km should be further than any possible distance between two points on earth
	optional double geo_dist_max = 20		[ default=25000000 ];
	// 200 km per second gets from LA to NY in 20 seconds, covers the world in 2 mins
	optional double geo_dist_per_sec = 21	[ default=200000 ];
	optional double geo_score_coeff = 22	[ default=0.0 ];
	optional double geo_dist_normalized_min = 32 [ default=200000 ];
	optional double geo_dist_normalized_max = 33 [ default=4000000];

	// Rating distance minimum and increase with wait time.
	optional double rating_dist_min = 23	[ default=50 ];
	optional double rating_dist_per_sec = 25	[ default=125 ];
	optional double rating_score_coeff = 26	[ default=10 ];
	optional double rating_dist_normalized_min = 34 [ default=100 ];
	optional double rating_dist_normalized_max = 35 [ default=650 ];

	// 0==normal, 1==in maintenance mode: no one enters queue, message about server maintenance
	optional int32 maintenance_mode = 28	[ default=0 ];

	// Time after which old active matches are forcibly removed.
	optional double active_match_timeout = 29	[ default=7200 ];

	// How long to wait in the queue before timing out.
	optional int32 wait_timeout_sec = 40		[ default=180 ];

	// Unused - rating dist keeps climbing forever
	optional double __deprecated_rating_dist_max = 24	[ default=650 ];
}

message MatchUserConfig {
	option (tbrpc.lua_config) = "MatchUser";

	// Time to live for the ping table if we fail to clean up session.
	optional int32 ping_table_ttl = 1 [default=7200];

	// Time to live for the blacklist if we fail to clean up session.
	optional int32 blacklist_ttl = 2 [default=7200];
}

message LobbyConfig {
	option (tbrpc.lua_config) = "Lobby";

	// Max number of users to allow in a lobby.
	optional int32 max_members = 1			[default = 8];

	// Time-to-live for match keys generated by the lobby.
	optional int32 match_ttl = 2			[default = 3600];

	// Time to live for lobby keys.
	optional int32 lobby_ttl = 3			[default = 3600];

	// How long lobby matches remain in the active matches list if leaked.
	optional int32 active_match_timeout = 4	[default = 7200];
}

message LogAggregatorConfig {
	option (tbrpc.lua_config) = "LogAggregator";

	// Time to live for log types in seconds.
	optional int32 match_log_ttl = 1	[ default=3600 ];

	// Default time to live for unspecified log types
	optional int32 default_log_ttl = 20	[ default=3600 ];
}



// 
// ***************************** MatchConfig RPC Service ***************************
//

// Defines a client feature flag.
message FeatureDefinition {
	// Unique tag identifying the feature.  Cannot be empty or contain spaces.
	optional string tag = 1;

	// Free-form description of the feature.
	optional string description = 2;
}

// Describes when a set of feature flags are enabled.
message FeatureRule {
	// Server-generated unique ID of the rule.
	optional int64 rule_id = 1;

	// Feature tags and values enabled by the rule.
	optional tbmatch.ClientFeatureSet feature_set = 2;

	// Rule is only effective when enabled.
	optional bool enabled = 3;

	// Rules are evaluated in increasing priority order, with higher priority
	// rules taking precedence in case of conflict on a feature tag.
	optional int32 priority = 4;

	// Who owns this rule?
	optional string owner = 5;

	// Free-form text about this rule.
	optional string notes = 6;

	// If set, time after which the rule becomes active.
	optional int64 active_time_unix = 10;

	// If set, time after which the rule becomes inactive.
	optional int64 inactive_time_unix  = 11;
}

message GetGlobalConfigResult {
	optional GlobalConfig config = 1;
}
message SetGlobalConfigRequest {
	optional GlobalConfig config = 1;
}
message GetMatchQueueConfigResult {
	optional MatchQueueConfig config = 1;
}
message SetMatchQueueConfigRequest {
	optional MatchQueueConfig config = 1;
}
message GetMatchUserConfigResult {
	optional MatchUserConfig config = 1;
}
message SetMatchUserConfigRequest {
	optional MatchUserConfig config = 1;
}
message GetLobbyConfigResult {
	optional LobbyConfig config = 1;
}
message SetLobbyConfigRequest {
	optional LobbyConfig config = 1;
}


message ListFeatureDefinitionsResult {
	repeated FeatureDefinition def = 1;
}
message SetFeatureDefinitionRequest {
	optional FeatureDefinition def = 1;
}
message DeleteFeatureDefinitionRequest {
	optional string tag = 1;
}

message ListFeatureRulesResult {
	repeated FeatureRule rule = 1;
}
message GetActiveFeaturesResult {
	optional tbmatch.ClientFeatureSet feature_set = 1;
}
message CreateFeatureRuleRequest {
	optional FeatureRule rule = 1;
}
message UpdateFeatureRuleRequest {
	optional FeatureRule rule = 1;
}
message DeleteFeatureRuleRequest {
	optional int64 rule_id = 1;
}


service MatchConfigService {
	rpc GetGlobalConfig(tbrpc.Empty) returns (GetGlobalConfigResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc SetGlobalConfig(SetGlobalConfigRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	rpc GetMatchQueueConfig(tbrpc.Empty) returns (GetMatchQueueConfigResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc SetMatchQueueConfig(SetMatchQueueConfigRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	rpc GetMatchUserConfig(tbrpc.Empty) returns (GetMatchUserConfigResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc SetMatchUserConfig(SetMatchUserConfigRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	rpc GetLobbyConfig(tbrpc.Empty) returns (GetLobbyConfigResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc SetLobbyConfig(SetLobbyConfigRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}


	rpc ListFeatureDefinitions(tbrpc.Empty) returns (ListFeatureDefinitionsResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	// Create or update a feature definition.
	rpc SetFeatureDefinition(SetFeatureDefinitionRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	// Also deletes any feature rules referencing the feature.
	rpc DeleteFeatureDefinition(DeleteFeatureDefinitionRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}

	rpc ListFeatureRules(tbrpc.Empty) returns (ListFeatureRulesResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc GetActiveFeatures(tbrpc.Empty) returns (GetActiveFeaturesResult) {
		option (tbrpc.access) = CONFIG_READ;
	}
	rpc CreateFeatureRule(CreateFeatureRuleRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	rpc UpdateFeatureRule(UpdateFeatureRuleRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
	rpc DeleteFeatureRule(DeleteFeatureRuleRequest) returns (tbrpc.Empty) {
		option (tbrpc.access) = CONFIG_WRITE;
	}
}




//
// ***************************  TBMatch instance: ServerConfig  ************************
//
// ServerConfig configures a local TBMatch instance, and is typically stored as a file
// read by tbmatch on startup.  It contains:
//    - Network host names, port numbers for connecting to dependent services
//    - Credentials for authorizing to dependent services
//    - Local paths for finding support data files, templates, keys
//    - Port and path where TBMatch should accept requests.
//

// How to connect to the database.
message DatabaseConfig {
	optional string user = 1;
	optional string password = 2;
	optional string host = 3			[default = "localhost"];
	optional int32 port = 4				[default = 5432];
	optional string database = 5		[default = "radiant"];

	// How long to wait for a connection to establish in seconds.
	// Zero means infinite.
	optional int32 connect_timeout = 6	[default = 0];

	// Max number of idle connections.
	optional int32 max_idle = 7			[default = 32];

	// Max open connections.
	optional int32 max_open = 8			[default = 32];

	// "disable", "require", or "verify-full"
	optional string ssl_mode = 9		[default = "require"];

	optional string schema_path = 20	[default = "/opt/tbmatch/schema"];
}

message RedisConfig {
	optional string host = 1			[default = "localhost"];
	optional int32 port = 2				[default = 6379];
	optional string password = 3;

	optional int32 max_idle = 4			[default = 10];

	// Switch to a non-default database index.
	optional int32 database = 5;

	// How long to wait for a new Redis connection in milliseconds.
	optional int32 connect_timeout_ms = 10	[default = 500];

	// Read timeout in milliseconds.  0 = infinite.
	optional int32 read_timeout_ms = 11		[default = 180000];
	optional int32 write_timeout_ms = 12	[default = 5000];

	// Path containing Lua script files to load in Redis.
	optional string lua_path = 13			[default = "/opt/tbmatch/lua"];

	// Extra Lua include search paths.
	repeated string lua_include = 14;
}

// Generic Google API access credentials
message GApiConfig {
	optional string proxy_url = 1;
	optional string project_id = 2			[default = "radiant-cloud"];

	enum AuthType {
		GCE = 1;
		SDK = 2;
	}
	optional AuthType auth = 4				[default = GCE];

	// Optional role account for auth == GCE
	optional string gce_account = 10		[default = "default"];

	// Optional account name for auth == SDK
	optional string sdk_account = 11;
}

// Where to store something on Google Cloud Storage.
message GcsStorageConfig {
	optional string proxy_url = 1;
	optional string project_id = 2;
	optional string bucket_name = 3;
}

message SessionAuthKey {
	// Base64 encoded session key for signing new cookies.
	optional string current = 1;
	// Base64 encoded alternate encoded key signature to accept.
	optional string previous = 2;
}

// How to expose RPC methods.
message RPCConfig {
	// HTTP port to bind to.
	optional int32 http_port = 1		[default = 8080];

	// URI prefix to expose the tbmatch API.
	optional string rpc_uri = 2			[default = "/rpc/"];

	// The 64-byte session key.
	optional SessionAuthKey session_key = 3;

	// How long before an idle session is discarded with no activity at all.
	optional int32 session_timeout_secs = 4		[default = 300];

	// Time window to consider "active" sessions, e.g. those invoking methods
	// other than GetEvent.
	optional int32 session_active_window_secs = 5	[default = 900];

	// Max content size of requests, to prevent denial of service
	optional int64 max_request_size = 6		[default = 10000000];

	// File to log JSON-format RPC records.
	optional string json_log_path = 10;
}

// Configuration for talking to payment gateway (Authorize.Net).
message PaymentCreds {
	// URL where the API can be reached.
	optional string api_url = 1;

	// API Login ID.
	optional string api_login_id = 2;

	// Transaction Key.
	optional string transaction_key = 3;
}

// How to talk to the Portal service via Redis.
message PortalClientConfig {
	// List to enqueue (RPUSH) portal requests.
	optional string request_queue = 1		[default = "portal:request"];

	// List to consume (BLPOP) portal closure reports.
	optional string report_queue = 2		[default = "tbmatch:portal:report"];

	// Time to wait for response from a portal request.
	optional int32 response_timeout_ms = 3	[default = 3000];
}

message MonitorConfig {
	// URI to access export variables.
	optional string vars_uri = 1			[default = "/metrics"];

	optional string health_uri = 2			[default = "/healthz"];

	// List of allowed subnets in CIDR notation for vars_uri, desyncz_uri, appconfz_uri
	// No entries allows access from any host.
	repeated string vars_allow_net = 3;

	// Separate allowed subnets for health_uri.
	repeated string health_allow_net = 4;

	// Where to serve the loaded appconfig.  Empty means don't serve.
	optional string appconfz_uri = 21;
}

// Common mail template variables.
message MailGlobalVars {
	optional string sender_address = 1		[default = "nobody@radiant-entertainment.com"];
	optional string site_name = 2			[default = "PlayRadiant"];
	optional string sender_name = 4			[default = "PlayRadiant Team"];

	optional string account_recovery_url = 3	[default = "http://playradiant.com/account/recovery"];
}

message MailConfig {
	// SMTP hosts to connect to.
	message MailHost {
		optional string host = 1;
		optional int32 port = 2					[default = 25];
	}
	repeated MailHost host = 1;

	optional bool tls = 3;
	optional bool insecure_skip_verify = 4;


	// Login credentials.
	optional string auth_user = 5;
	optional string auth_password = 6;

	// Location of mail fragments and templates.
	optional string template_path = 7		[default = "/opt/tbmatch/mail/templ"];
	optional string include_path = 8		[default = "/opt/tbmatch/mail/include"];
	// Check for changes on disk when fetching a template.
	optional bool auto_reload = 9;

	optional MailGlobalVars vars = 20;
}

message MatchMakerConfig {
	// Participate in election and poll queues when master?
	optional bool enabled = 1								[default = true];

	// How often to try to become master when not.
	optional int32 master_retry_interval_ms = 2				[default = 5000];

	// Milliseconds after which the master lock should expire if not re-upped.
	optional int32 master_lock_expiry_ms = 3				[default = 4500];

	// How often to run the polling script as master.
	optional int32 poll_period_ms = 4						[default = 500];

	// If the polling script fails, how long to back off.
	optional int32 error_retry_ms = 5						[default = 15000];
}

message AdminServerConfig {
	// Periodically look for history records in BQ and remove them from PostGres.
	// Behavior is configured through ExportTrimConfig within AppConfig.
	optional bool enable_export_trim = 1				[default = false];
}

//
// Server run-time config file.  Tells this server how to launch
// and resolve service dependencies.  May contain some credentials.
//
message ServerConfig {
	optional DatabaseConfig db_config = 1;
	optional RPCConfig rpc_config = 2;
	optional RedisConfig redis_config = 3;
	optional MailConfig mail = 4;
	optional PaymentCreds payment_creds = 5;
	optional PortalClientConfig portal_client = 6;
	optional MatchMakerConfig match_maker = 7;

	optional MonitorConfig monitor_config = 10;

	optional GcsStorageConfig desync_storage = 11;
	optional GcsStorageConfig crash_storage = 12;
	optional string stackwalk_binary_path = 13		[default = "/opt/tbmatch/bin/minidump_stackwalk"];
	optional GcsStorageConfig match_log_storage = 14;

	optional string geolite_database_file = 20		[default = "/opt/tbmatch/geoip/GeoIP2-City.mmdb"];

	// How to reach and authenticate to all Google APIs.
	optional GApiConfig google = 30;

	optional string bigquery_dataset = 31			[default = "logstash"];
	optional string bigquery_prefix = 32;

	// Number of cores Go runtime should use.
	optional int32 go_max_procs = 40				[default = 1];

	optional bool portal_sim_enabled = 61			[default = false];


	// Enable admin RPC services.
	optional bool admin_server = 70					[default = false];
	optional AdminServerConfig admin_server_config = 71;
}


//
// ***************************  TBMatch shared: AppConfig  ************************
//
// AppConfig is stored in the database, and provides configuration options that:
//    - Do not have security concerns.
//    - Are common to all TBMatch instances in a deployment.
//    - Define global application behaviors or reference data.
//

// Rules for handling account RPCs.
message AccountConfig {
	// Minimum length when setting a password.
	optional int32 min_password_length = 1			[default = 6];

	// Minimum number of unique character classes for a password.
	optional int32 min_password_classes = 2			[default = 2];

	// Access roles granted to publicly registered accounts.
	repeated tbrpc.Access register_access = 3;

	// How long before e-mail validation links expire.
	optional int32 email_validate_confirm_secs = 4	[default = 7200];

	// Prepended to email validation links.
	optional string email_validate_url_prefix = 5;

	// Number of bytes in the generated nonce hex string.
	optional int32 validate_nonce_length = 6		[default = 16];

	// How long a password reset code is valid for in seconds.
	optional int32 password_reset_expire_secs = 7	[default = 600];

	// Number of letters and numbers in the reset code.
	optional int32 password_reset_code_length = 8	[default = 6];

	// Max number of users to return from SearchUsers.
	optional int32 max_user_search_result = 10		[default = 100];

	// Minutes to keep an account locked out after exceeding lockout_threshold attempts.
	optional int32 lockout_duration_mins = 20				[default = 30];

	// Number of failed login attempts before account is locked.
	// Set to 0 to disable lockout.
	optional int32 lockout_threshold = 21					[default = 8];

	// Number of minutes after the last login failure after which the counter is reset to 0.
	optional int32 reset_lockout_counter_after_mins = 22	[default = 5];

	// How long do session tickets last (SessionService.RequestSessionTicket)?
	optional int32 session_ticket_expire_secs = 30			[default = 30];

	// Require a registration key?
	optional bool require_registration_key = 40				[default = false];

	// Deny any handle that full-matches one of these expressions.
	repeated string disallow_handle_regexp = 41;

	// Prefix to use when generating a handle to replace an offensive/disallowed one.
  	optional string nuke_handle_prefix = 42			[default = "Donut"];

	// Pre-existing nuked handles to skip over before giving up.
	optional int32 nuke_retries = 43				[default = 1000];
}


// How an experience counter maps to increasing "levels".
// Level 1 starts at 0 XP.
message LevelProgression {
	// How much XP is required to reach level 2 from level 1.
	optional int32 baseline = 1						[default = 15000];

	// A level takes this much more XP to reach than the previous level.
	optional double coefficient = 2					[default = 1.2];

	// XP awarded for playing a match.
	optional int32 match_xp = 3						[default = 3750];

	// XP awarded for winning a match.
	optional int32 win_bonus_xp = 4					[default = 4000];
}

message EchelonRules {
	// Points required to advance for each tier in this echelon.
	repeated int32 tier_points = 1;

	// If true, don't apply losses while in this echelon.
	optional bool ignore_loss = 2					[default = false];

	// If true, echelon has no tiers or points.
	optional bool final = 3							[default = false];
}

message EchelonConfig {
	// Define all ranking echelons in progression order (0=Carbon .. N-1=Legend)
	repeated EchelonRules echelon = 1;

	// Number of wins in a streak for bonus to apply.
	optional int32 win_streak_bonus_minimum = 10	[default = 3];

	// Points to award for a win streak bonus.
	optional int32 win_streak_bonus_points = 11		[default = 1];
}

message RankConfig {
	optional LevelProgression player_progress = 1;
	optional LevelProgression char_progress = 2;

	// Define the ranking echelons.
	optional EchelonConfig echelon_config = 3;
}

message Glicko2RatingConfig {
	// How deterministic are matches in this game (0.2 .. 1.2)
	optional float tau = 1								[default = 0.9];

	// How many minutes in each rating period?
	optional int32 rating_period_mins = 2				[default = 30];

	// How often should MatchMaker master check for new matches to rate?
	optional int32 check_period_mins = 3				[default = 5];

	// Rating deviation (RD) for an unrated (or maximum lapsed) player.
	optional float max_deviation = 10					[default = 350];

	// Rating deviation (RD) never to drop below, to ensure some freedom of movement.
	optional float min_deviation = 11					[default = 30];

	// Number of rating periods must pass before an active player's deviation
	// becomes as uncertain as that of an unrated player.
	// Determines 'c' in Glicko paper.  Default (for 30 minute period) is 3 weeks.
	optional float deviation_decay_periods = 12			[default = 1008];

	// Rating deviation of a "typical" active player for computation of 'c'.
	optional float typical_deviation = 13				[default = 50];
}

// Behaviors of the Matching methods.
message MatchServiceConfig {
	// How long to wait for an opponent to be ready to continue a match.
	optional int32 match_ready_timeout_ms = 2		[default = 30000];

	// How to award players with the outcome of a match.
	optional RankConfig rank = 7;

	// Max recent match results to return from GetRecentMatches.
	optional int32 max_recent_results = 8			[default = 5];

	// If we lost more than this percentage of packets during ping test,
	// advise the user of network issues and don't record the result for matchmaking.
	optional float max_packet_loss_ratio = 21		[default = 0.25];

	// Max number of seconds between each player's desync report to qualify.
	optional int32 desync_report_max_drift = 30		[default = 60];

	// How to perform perform Glicko2 rating system updates.
	optional Glicko2RatingConfig rating_config = 50;

	// Glicko rating to assign to players with zero games played.  Glicko
	// ratings still assume 1500.
	optional float unrated_glicko_rating = 60		[default = 1500.0];

	// Glicko rating to assign to players with zero games played depending
	// on their SkillEstimateType. SkillEstimateType acts as the index into
	// the array.
	repeated float default_glicko_rating = 61;

	// Max portion of rating difference to adjust for win/loss, scaled by deviation.
	optional float session_rating_adjust_coefficient = 65 [default = 0.25];

	// How long, in seconds, to re-use the last read values from lua config objects.
	optional int32 lua_config_cache_sec = 70		[default = 60];

	// Require that only one game may be played at once, only one random match queue
	// can be pending at a time, and cannot enqueue while in a custom lobby.
	optional bool strict_game_sessions = 80				[default = false];

	// deprecated
	optional int32 __deprecated_get_ranked_timeout_ms = 1 [default = 180000]; // moved to lua config
	optional bool __deprecated_provide_local_fsm = 3;
	optional string __deprecated_replay_path = 4;
	optional int32 __deprecated_match_lifetime_sec = 6; // moved to lua config
	optional int32 __deprecated_select_size = 9;		// moved to lua config
	optional string __deprecated_desync_report_path = 5;
	optional int32 __ping_test_lifetime_sec = 20;
	optional int32 __deprecated_games_to_win = 40;
}

message LobbyServiceConfig {
	// Number of characters in the join code.
	optional int32 join_code_length = 1				[default = 6];

	// Maximum number of members allowed in a single lobby.
	optional int32 max_members = 2					[default = 16];
}

// How to interact with Authorize.Net API.
message PaymentConfig {
	// Amount of time to wait for calls before giving up.
	optional int32 timeout_ms = 1					[default = 5000];

	// An Authorize.Net account works in a single currency type
	// that is associated with the merchant account.  Use this currency
	// to format and verify input amounts.  If none is given, uses
	// the default system currency in AppConfig.
	optional string currency = 2;

	// Whether to use transactionSettings/testRequest=TRUE.
	// This is for phase 2 testing, connecting to the production API endpoint,
	// but still submitting test requests.
	optional bool test_mode = 3               		[default = true];

	// How to perform validation of payment profiles on
	// creation and update.  Maps to validationMode parameter
	// of the CIM API.  TEST and LIVE will generate e-mails, but
	// only LIVE will reach the payment processor.
	enum Validation {
		NONE = 1;
		TEST = 2;
		LIVE = 3;
	}
	optional Validation val_mode = 4				[default = TEST];

	// Character delimiting fields in APIs that return a "direct response".
	// Authorize.Net sets this to comma by default, but we choose pipe and
	// disallow pipe in most fields.
	optional string direct_response_delimiter = 5	[default = '|'];
}

// Describes a supported currency and rules for working with it.
message CurrencyDesc {
	// 3-letter capital code.
	optional string code = 1;

	// Digits of precision.
	optional int32 precision = 2;

	// Character prepended to distinguish values.
	optional string symbol = 3;

	// List of 3-letter country codes that use this currency.
	repeated string country_iso3 = 4;

	// Allow balance loads with this currency.
	optional bool balance_purchase_allow = 40;

	// Default values given for account balance purchases.
	repeated tbrpc.Money balance_purchase_default = 41;

	// Range of allowed custom balance purchase amounts.
	optional tbrpc.Money balance_purchase_min = 42;
	optional tbrpc.Money balance_purchase_max = 43;

	// Maximum balance an account may hold in this currency.
	// Orders that would exceed this amount are rejected.
	optional tbrpc.Money balance_max = 50;
}

// What currencies are supported and their rules.
message CurrencyConfig {
	repeated CurrencyDesc desc = 1;

	// Currency to use for new accounts when the country code
	// is unknown.
	optional string default_currency = 2;
}

// Configuration for online store behaviors, limits, etc.
message ShopConfig {
	optional PaymentConfig payment = 1;
	optional CurrencyConfig currency = 2;

	// Max number of orders to return from SearchPurchaseOrders.
	optional int32 max_order_search_result = 10	[default = 100];

	// Max number of results returned from GetAccountOrderHistory.
	optional int32 order_history_page_size = 11	[default = 10];

	// Max number of days you can view balance history over.
	optional int32 max_balance_history_days = 12	[default = 31];
}

message EventConfig {
	// Milliseconds that RPCs waiting on changes are
	// allowed to wait before giving up.
	optional int32 change_wait_timeout_ms = 10	[default = 30000];

	// Default lifetime of time-limited events.
	optional int32 event_expiry_ms = 11			[default = 15000];

	// Default lifetime of user event queue keys themselves.
	optional int32 user_key_expiry_sec = 12	[default = 60];
}

message AuditConfig {
	// Most number of results to return from an audit query.
	optional int32 max_audit_search_result = 1	[default = 100];

	// Largest time range allowed for a search.
	optional int32 max_audit_search_days = 2	[default = 31];
}

message CrashReportConfig {
	optional bool should_store_crash_bundles = 1	[default = true];
	optional int32 max_versions_to_keep = 2			[default = 3];		// the number of build versions for each client app to keep the crash redis records around for
	optional int32 polling_interval = 3				[default = 60];		// the interval to check for new crash reports to symbolicate, in seconds
}

// Flags to provide (mainly) backwards compatibility during server rollouts.
message ServerRolloutFlags {

	// Provide hashing secret for clients, and check signatures of
	// incoming UDP packets.
	optional bool secure_portal_udp_traffic = 2 [default = false];

	// Search for a ticket to get back into queue at an old spot
	// even when using the GetMatch rpc.
	// Purpose: backwards compatibility while waiting for client
	//          build to use ResumeGetMatch for auto-requeueing
	optional bool __deprecated_auto_resume_get_match = 1 [default = true];
}

message DesyncReportConfig {
	optional int32 polling_interval = 3				[default = 60];		// the interval to check for new desync reports to process, in seconds
}

// Configuration for trimming database history tables which are accumulated externally.
message ExportTrimConfig {
	// Whether database table trimming is enabled.
	optional bool trim_enabled = 1					[default = false];

	// Don't look for records younger than this age.
	optional int32 min_age_days = 2					[default = 30];

	// Process at most this many records at once.
	optional int32 batch_size = 3					[default = 1000];

	// How often to trim the database.
	optional int32 trim_interval_mins = 4			[default = 60];
}

//
// AppConfig contains application reference data and behavioral settings.
// It is stored in the database and is applied universally by all servers.
//
// It should NOT contain highly sensitive information such as credentials
// or key material.
//
message AppConfig {
	optional AccountConfig account_config = 1;
	optional MatchServiceConfig match_config = 2;
	optional ShopConfig shop_config = 3;
	optional EventConfig event_config = 4;
	optional AuditConfig audit_config = 5;
	optional LobbyServiceConfig lobby_config = 6;
	optional CrashReportConfig crash_report_config = 7;
	optional ServerRolloutFlags server_rollout_flags = 8;
	optional DesyncReportConfig desync_report_config = 9;
	optional ExportTrimConfig export_trim_config = 10;
}

// Allow frontend and other servers to read AppConfig.
service ConfigService {
	rpc GetAppConfig (tbrpc.Empty) returns (AppConfig) {
		option (tbrpc.access) = APP;
	}
}



//
// ***************************** TBFE config file: FEConfig  ****************************
//
// FEConfig is TBFE's stored local configuration file.  It tells a TBFE on
// startup where to connect to dependent services, and contains sensitive secrets and
// credentials.
//

message FEContentConfig {
	// Directory containing templates and data files.
	optional string data_dir = 1;

	// Root for static web content (optional).
	optional string static_dir = 2;

	// If enabled, reload templates on every request.
	optional bool devel_mode = 3;

	// Directory where localization resources can be found.
	// tb.properties must be present here.
	optional string message_dir = 4;

	// Name of the application.
	optional string application_name = 5		[default = "PlayRadiant.com"];

	optional string recaptcha_site_key = 6;
	optional string recaptcha_secret_key = 7;
	optional string recaptcha_verify_url = 8	[default = "https://www.google.com/recaptcha/api/siteverify"];

	// HTTP(s) proxy to use when querying the recaptcha URL.
	optional string recaptcha_proxy_url = 9;

	// After how many form submission failures should you have to solve another CAPTCHA?
	optional int32 recaptcha_failure_threshold = 10	[default = 3];

	// If set, send 301 redirect requests NOT using this host name.
	optional string canonical_hostname = 11;

	// URL scheme to use when redirecting to canonical_hostname.
	optional string canonical_scheme = 12		[default = "http"];

	// Template to use for content of a 503 Internal Server Error.
	optional string internal_error_template = 20 [default = "503.html"];

	// Template for 404 not found page content.
	optional string not_found_template = 21 [default = "404.html"];

	// Path to redirect to when an authorized-only page is
	// requested with no valid session.
	optional string login_redirect_path = 22	[default = "/loginRedir"];

	// Link to download the launcher for logged-in users.
	optional string launcher_download_url = 30;

	// Link to the forum.
	optional string forum_url = 31;

	// If set, redirect requests to the landing page to here.
	optional string landing_redirect_url = 40;
}

message FEBackendConfig {
	// Where to reach Match API servers.
	optional tbrpc.LBClientConfig match_client = 1;

	// Backend account to use for fetching application metadata.
	optional string app_login = 2;
	optional string app_password = 3;

	// How long to wait for readyness on startup.
	optional int32 startup_wait_sec = 10		[default = 60];
}

message VanillaJSConnectConfig {
	optional string client_id = 1;
	optional string secret = 2;
	optional int32 max_age_secs = 3		[default = 300];

	// Role for users with 0 forum access otherwise.
	optional string unauth_role	= 4		[default = "unauth"];

	// Email suffix that enables the "blessed" role
	optional string bless_email_suffix = 10 [default = "@radiant-entertainment.com"];
	// Role that is bestowed
	optional string bless_role = 11 		[default = "risingthunderteam"];
}

//
// Run-time file for the tbfe web application server.
//
message FEConfig {
	// Port to listen on for HTTP requests.
	optional int32 http_port = 1		[default = 8000];

	// Session key(s) to use.
	optional SessionAuthKey session_key = 2;

	// Number of seconds after which idle sessions will
	// expire.
	optional int32 session_timeout_secs = 3		[default = 300];

	// Number of cores Go runtime should use.
	optional int32 go_max_procs = 4				[default = 1];

	// Where to write access records in JSON format.
	optional string json_access_log_path = 5;

	// Monitoring configuration.
	optional MonitorConfig monitor_config = 10;

	// How to talk to Redis for sessions.
	optional RedisConfig redis_config = 60;

	// Where to find and how to serve dynamic HTML content.
	optional FEContentConfig content_config = 61;

	// Where to reach backend API servers.
	optional FEBackendConfig backend_config = 62;

	optional VanillaJSConnectConfig vanilla = 70;
}


//
// ************************** MatchMon config file: MatchMonConfig *********************
//
// MatchMonConfig is the local config file for MatchMon, the internal admin console
// for TBMatch services.
//

message MatchMonConfig {
	// Port to listen on for HTTP requests.
	optional int32 http_port = 1		[default = 80];

	// Directory containing templates and include files.
	optional string data_dir = 3;
	// Directory containing static content.
	optional string static_dir = 4;

	// Where to find GeoIP.dat
	optional string geoip_dir = 6;

	// Where to load localization resources.
	optional string msg_dir = 7;

	// Where to persist sessions.
	optional string session_dir = 8		[default = "/dev/shm/.matchmon-session"];

	// Where desyncs are stored.
	optional GcsStorageConfig desync_storage = 11;
	
	// Where crash information is stored.
	optional GcsStorageConfig crash_storage = 12;

	// Where to reach backend API servers.
	optional FEBackendConfig backend_config = 13;

	// How often to run statistical queries in seconds.
	optional int32 poll_interval_sec = 21 [default = 30];

	// Time cut-off for considering a session active.
	optional int32 session_count_max_age_sec = 31 [default = 300];
	// Max # of results to pull from the recent session table.
	optional int32 session_result_limit = 32 [default = 20000];

	// Max # of lobbies to pull from active lobbies.
	optional int32 lobby_result_limit = 41 [default = 1000];

	// Max # of active matches to retrieve.
	optional int32 active_match_result_limit = 42 [default = 1000];
}
